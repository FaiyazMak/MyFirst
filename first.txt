Thi is my first tutorial with git 
and so this is my first version.
soo excited!

****some linux commands:
pwd : present working directory of our terminal...it shows the folder into which we are executing the commands presently.
ls : list show ...shows all the files and folder of present working directory.
cd : change directory...we can shift our terminal to any folder by using this...basically cahnges pwd of terminal.
rm -rf : it is command used to delete particular folders and files.rm -rf : it is command used to delete particular folders and files.
rm -rf .git : deleats the .git folder and thus deletes all the tracking of the project folder. i.e delets the present git directory.
ls -la : shows all the folders of our git directory.

****git 
it is distributed version controlling system, which can tract all the changes made to developing project where u can also rollback 
to previous versions.

****git as three stage architecture:
working directory : the current working files of all the versions.
staging area : files are send to staging area which are to be commited.
git directory/repository : all the versions of the project which is created after each commit are stored in this directory. 
	.git is that hidden git directory of the version controlling folder.

****git status life cycle:
untracked: when simply git repository is made for the project folder then all the files init are untracked initally. Then u have to add it to track it.
unmodified: When tracked files will be unmodified if not made any changes to the file. Here u can say files are staged to be committed.
modified: when made any changes to any file then that file is modified ..then when u add it by running command git add it gets staged.
stagged: when committed, then all the changes which were staged, only that gets commited. And anything that is modified but not staged and then committed then 
	the previous version of that modified file which was staged gets committed insted of modified file...so thats the importance of stagging.

****git starting commands:
git : just shows about git and all he command to be used by it.
git init : initializes the git to the current project folder and all the files into that folder is tracked.
git config --global user.name"Faiyaz"
git config --global user.email"faiyaz.dmak@gmail.com" : this above two commands is used to give your identity to git.
	Global means git software stores the info for all projects without entering every time. 
git config user.name : shows name of user.
git config user.email : shows email of user.

****commands to work on--
git init : makes the current folder as git tracking directory i.e any changes in that folder will be tracked.
git status : shows how many files are not tracked uptodate..which files has been modified , which files has been send to staging area. 
	and in general how changes are uptotime.
git add --a : adds all the files to the staging area, to be commited.
git add anynameoffile : adds particular file to staging area.
git commit --m "anymessage" : commits the changes and saves it along with message.
git log : show all the versions of the folder uptodate.

git clone ParticularUrl : this clones particular repository from git hub into out local computer into provided folder i.e we can track that 
	particular code from git hub into our computer and can use it as our git repositiory.
git clone ParticularUrl . : this clones the git hub repository into the current open folder of our computer and not makes folder to clone it inside 
	that folder.

commands to ignore files in git:
touch filename : this creates files/folders in the repository folder i.e in the working folder
touch .gitignore : this creates a file in the working directory with name .gitignore ...
	create this file and write names of folders and files which u want to be ignored by git ...that simple. see eg .gitignore of current directory.
git rm --cached filename : if particular file was tracked before and now u add it in .gitignore then that file will be not tracked from hereon but its history is 
 not removed from git depository...if it has history which takes lots of space then that causes problem ..so this commands deletes the history of that 
	file being added in .gitignore.

git diff : shows difference between staged files and modified files.

git diff --staged : shows difference between staged files and previous committed files.

git commit -a -m "anyMessage" : skips the stagging area...i,e u can simply commit modifed files without stagging it ..i.e without running git add command.
	untracked files do not get committed here...for that u have to add that particular untracked file..and then commit...i.e run git add command to stage and then commit.
	 ...otherwise git will ignore untracked files and will only commit other changes.

****Renaming, deleting files from working directory:
simply u can rename a file in working directory by right click but it will show old name file as file deleted and renamed file as untracked file when made git status and 
	has to add it to staging area to tell git that it is renamed...but at the end it will be renamed in git repository as well.
	Another way to do to avoid git add step is as below..
git mv fileNmae newNameforfile : renames the file from working directory and directly stages the remaned file with its history...mv is linux command meaning move.
git rm fileNmae : deletes the file from working directory ....rm means remove.

untracking the tracked file:
git rm --cached fileName: removes caches..i.e deletes the tracking history of that file from git repository and make it untracked
	...but this thing when made git status...will show that this file is untracked.
	so if want to not show it put this file in .gitignore file to ignore it as well.
	And when a file was tracked till date and put it in .gitignore and made changes in that file then 
	still that file will show modified in git status as it was tracked earlier...
	so in this case it has to be made git rm --cached fileName to untrack it as well.

viewing git commits... in diff ways with filters:
git log : -show all the commits from recent till very beginning ...shows commit member name and email along with date and time of commit and commit message.
	-Does not show all the details i.e all the differences of commit from previous one.
git log -p : shows all the commit along with all the details i.e differences of commit from previous commit. This is very much detailed and comprehensive info about commits.
git log -p -3 : here -3 can be any no....show only previous 3 commits along with all its details just like git log -p. ...but shows only given no. of previous commits.
git log --stat : shows all the commits in very much well organised with its differences with previous commits
	...and shows the details in very much short manner i.e which files were edited and how much edited.
git log --pretty=oneline : shows all the commits in only one line info...shows only commit id and commit message.
git log --pretty=short : shows commits in litte short ...i.e shows author name and commit message.
git log --pretty=full : shows commits just like short but also shows commiter name ...i.e show author and committer name along with commit message.
More Filters:
git log --since=2.days : shows only last two days commits or any no. of given days accordingly...shows author name , date n time and commit message.
git log --since=2.weeks : same as above ...but of weeks.
git log --since=2.months : same as above ...but of months.
git log --since=2.years : same as above ...but of years.
git log --pretty=format:"%h -- %an" :shows the commit info in this format. Here 'h' is id of commit maybe! and 'an' is author name.
git log --pretty=format:"%h -- %ae" :Here 'an' is author email.
*There is lot more with above format ...can google*

changing git commits:
git commit --amend : After this one editor will be opened which contains info about previous commit and can edit that commit with new commit message and some more changes.
	All the new changes/modifications which were made and staged after previous commit will alos be added to previous commit and 
	a single commit is made includes changes from previous commit and recent changes.

unstaging and unmodifying:
git restore --staged fileName : when a file is staged it can be unstaged or can be send to modified by this command. i.e basically this command unstages the file.
git restore filename : modified file will be unmodified as it was it the previous commit.
git checkout -- fileName : when a file is modified after a commit then u can unmodify that file and make it as it was in previous commit by this command.
git checkout -- .gitignore : .gitignore does not get efficted by this ....thats the safety we get ...just wrote it to know the thing.
git checkout -f : All the files modified will be unmodified and make it as it was in the previous commit...
	This is dangerous because all the changes to the files made will be deleted if run this command. 

